model Course {
    id          String     @id @default(uuid()) @db.Uuid
    name        String     @unique
    department  Department
    description String
    image       String     @db.Text
    class       Class[]
    createdAt   DateTime?  @default(now())
    updatedAt   DateTime?  @updatedAt
    deletedAt   DateTime?  @db.Date

    @@unique([name, department])
}

// Class have course
model Class {
    id String @id @default(uuid()) @db.Uuid

    courseId String @db.Uuid

    course        Course          @relation(fields: [courseId], references: [id])
    classSchedule ClassSchedule[]

    teacherId String   @db.Uuid
    teacher   Teacher? @relation(fields: [teacherId], references: [id])

    classStudent ClassStudent[]
    section      String         @db.Text

    classDiscussion ClassDiscussion[]

    isOngoing Boolean @db.Boolean

    academicYear String    @db.Text
    createdAt    DateTime? @default(now())
    updatedAt    DateTime? @updatedAt
    deletedAt    DateTime? @db.Date

    @@unique([academicYear, section])
}

// Class have schedule
model ClassSchedule {
    id     String @id @default(uuid()) @db.Uuid
    roomId String @db.Uuid
    room   Room   @relation(fields: [roomId], references: [id])

    // Day and time
    scheduleDay          String
    scheduleStartingTime DateTime @db.Time()
    scheduleEndingTime   DateTime @db.Time()

    classId String @db.Uuid
    class   Class  @relation(fields: [classId], references: [id])

    // @@unique([scheduleDay,scheduleTime,room]) + if class is ongoing
}

// Class schedule have room
model Room {
    id            String          @id @default(uuid()) @db.Uuid
    building      String          @db.Text
    floor         String          @db.Text
    name          String          @db.Text
    image         String          @db.Text
    classSchedule ClassSchedule[]
    createdAt     DateTime?       @default(now())
    updatedAt     DateTime?       @updatedAt
    deletedAt     DateTime?       @db.Date

    @@unique([building, name])
}

// Class have discussions 
model ClassDiscussion {
    id       String @id @default(uuid()) @db.Uuid
    authorId String @db.Uuid
    // Teacher and Student can post class discussion
    user     User   @relation(fields: [authorId], references: [id])

    title   String @db.Text
    content String @db.Text

    // Class Discussion can be commented by teacher and student
    classDiscussionComment ClassDiscussionComment[]

    // Class Discussion can be reacted By Teacher and student
    classDiscussionReact ClassDiscussionReact[]

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Date
    Class     Class?    @relation(fields: [classId], references: [id])
    classId   String?   @db.Uuid
}

model ClassDiscussionComment {
    id       String @id @default(uuid()) @db.Uuid
    authorId String @db.Uuid
    // Teacher and Student can post class discussion
    user     User   @relation(fields: [authorId], references: [id])

    comment String @db.Text

    createdAt         DateTime?        @default(now())
    updatedAt         DateTime?        @updatedAt
    deletedAt         DateTime?        @db.Date
    ClassDiscussion   ClassDiscussion? @relation(fields: [classDiscussionId], references: [id])
    classDiscussionId String?          @db.Uuid
}

enum Reaction {
    like
    heart
    laugh
    angry
    sad
    smile
    celebrate
}

model ClassDiscussionReact {
    id String @id @default(uuid()) @db.Uuid

    authorId String @db.Uuid
    // Teacher and Student can react class discussion
    user     User   @relation(fields: [authorId], references: [id])

    reaction Reaction

    createdAt         DateTime?        @default(now())
    updatedAt         DateTime?        @updatedAt
    deletedAt         DateTime?        @db.Date
    ClassDiscussion   ClassDiscussion? @relation(fields: [classDiscussionId], references: [id])
    classDiscussionId String?          @db.Uuid
}

model ClassStudent {
    id      String @id @default(uuid()) @db.Uuid
    classId String @db.Uuid
    class   Class  @relation(fields: [classId], references: [id])

    studentId BigInt
    student   Student? @relation(fields: [studentId], references: [id])

    classGrade ClassGrade[]

    @@unique([classId, studentId])
}

model ClassGrade {
    classStudentId String        @id @default(uuid()) @db.Uuid
    classStudent   ClassStudent? @relation(fields: [classStudentId], references: [id])
    prelim         String        @db.Text
    midterm        String        @db.Text
    preFinals      String        @db.Text
    finals         String        @db.Text
}
